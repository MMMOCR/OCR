on: [push,pull_request,workflow_dispatch]
name: test-suite
jobs:
  lint:
    name: clang-format Code Formatter
    runs-on: self-hosted
    steps:
    - name: Clang Code Formatter
      uses: MMMOCR/clang-format-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test_gui:
    needs: lint
    name: test gui
    runs-on: self-hosted
    steps:
    - name: test gui
      uses: MMMOCR/docker-test@master
      env:
        REPO_FULLNAME: MMMOCR/OCR
        WORKFLOW_PATH: test_gui.sh
        
  push_other_remote:
    needs: lint
    name: push remote
    runs-on: self-hosted
    container:
      image: debian:bullseye
      volumes:
        - /home/cl0pinette/.ssh:/github/home/.ssh
    steps:
    - name: setup docker
      run: echo "#### Installing software"
        && apt update
        && apt install git -y
        && echo "#### Software installed"
      env:
        REPO_FULLNAME: MMMOCR/OCR
        REMOTE_URL: ${{ secrets.REMOTE }}
    - name: git remote add
      run: echo "#### Adding remote"
        && if ! git config remote.mirror.url > /dev/null; then git remote add mirror "$REMOTE_URL"; fi
        && echo "#### Remote added"
      env:
        REPO_FULLNAME: MMMOCR/OCR
        REMOTE_URL: ${{ secrets.REMOTE }}
    - name: git push to mirror
      run: export GIT_SSH_COMMAND="ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i /github/home/.ssh/id_ed25519" 
        && if git config remote.origin.url > /dev/null; then git remote remove origin && git remote add origin https://x-access-token:$GITHUB_TOKEN@github.com/$REPO_FULLNAME.git; fi
        && git fetch --all
        && git push mirror --all
      env:
        REPO_FULLNAME: MMMOCR/OCR
        REMOTE_URL: ${{ secrets.REMOTE }}

## Exemple de test :
#   compile:                            // identifiant du test
#    needs: lint                        // si besoin d'une dependance (ils auront tous besoin de compile normalement)
#    name: compile-code check           // nom du test affiche sur github
#    runs-on: self-hosted               // ne pas toucher (specifie qu'il faut le lancer sur mon serveur)
#    steps:                             // defini les etapes du test (on n'en a besoin que d'une seule)
#    - name: Compile code               // nom de l'etape
#      uses: MMMOCR/docker-test@master  // ne pas toucher (specifie quelle base utiliser)
#      env:                             // variable a passer au test (laisser les deux du dessous)
#        REPO_FULLNAME: MMMOCR/test     // variable pour l'url du repo
#        WORKFLOW_PATH: compile.sh      // nom du script a lancer (le script doit etre place dans .github)
     

